注意此案例采用webpack3进行配置，现在webpack已经到4.0以上版本了(需要单独引入vueLoaderPlugin)。在安装时,注意版本的不同。可以安装3.0的版本

一.vue工程的搭建
 npm init 初始化一个npm项目
1.cnpm i webpack@3.10.0 vue@2.5.13 vue-loader@13.6.0    -D  安装webpack和vue,使用vue要安装vue-loader
2. cnpm i css-loader@0.28.7 vue-template-compiler@2.5.13  -D   根据终端WARN提示安装css-loader,因为vue-loader依赖css-loader 

3、新建src目录并在src下新建app.vue-在app.vue中书写基本的vue结构

4、在根目录下新建webpack.config.js
   声明我们的入口文件entry: index.js  
   设置出口文件bundle.js及存放路径 output:{ }

---------------------------------------------------------------
-----------------------------------------------
二. 各种静态资源的加载
webpack对其他类型的文件处理,可在配置文件中配置rules规则.
同样根据配置中的处理的loader都要安装.
cnpm i style-loader@0.19.1 url-loader@0.6.2 file-loader@1.1.6  -D

stylus的css预处理器
cnpm i stylus-loader@3.0.1 stylus@0.54.5 -D
同理其他的像sass,less等其他的预处理器都可以类似的方法去使用

---------------------------------------------------------------
-----------------------------------------------
三.webpack-dev-server的配置

cnpm i webpack-dev-server@2.9.1 -D
webpack-dev-server在开发环境中会给我们带来与webpack不一样的效果,用的都是同一个配置文件
    "build": "webpack --config webpack.config.js",
    "dev": "webpack-dev-server --config webpack.config.js"

同一个配置文件,那么其中必然会根据一个环境变量判断,来判断是开发环境还是正式环境
NODE_ENV就是这个环境变量,在linux下 直接NODE_ENV=production,在windows环境下 需要set NODE_ENV=production,解决这种跨平台设置的差异性,我们可以安装cross-env@5.1.3
cnpm i cross-env@5.1.3 -D

    "build": "cross-env NODE_ENV=production webpack --config webpack.config.js",
    "dev": "cross-env NODE_ENV=development webpack-dev-server --config webpack.config.js"
在webpack.config.js配置好我们的测试环境后,我们还需要引入一个html-webpack-plugin,用于将我们打包好后的js融入到我们的HTml中去
cnpm i html-webpack-plugin@2.30.1  -D
完成webpack.config.js中后,你便可以使用npm run dev见证奇迹的时刻了

---------------------------------------------------------------
-----------------------------------------------
四.项目配置-postcss,babel配置
cnpm i post i postcss-loader@2.0.9 autoprefixer@7.2.3 babel-loader@7.1.2 babel-core@6.26.0 -D
新建postcss和babel的配置文件 并配置这两个文件

---------------------------------------------------------------
-----------------------------------------------
五.css单独分离打包配置及优化
安装extract-text-webpack-plugin
cnpm i extract-text-webpack-plugin@3.0.2  -D

打包类库代码及hash优化等
config.plugins.push(
        new ExtractPlugin('styles.[contentHash:8].css'),   //定义打包分离出的css文件名
        new webpack.optimize.CommonsChunkPlugin({          //定义静态文件打包
            name: 'vendor'
        }),
        new webpack.optimize.CommonsChunkPlugin({         //将app.js文件中一些关于webpack文件的配置单独打包出为一个文件,用于解决部分浏览器长缓存问题   
            name: 'runtime'
        })
    )

------------------------------------------------------------------
六.因为该项目练习中，有jsx模板，所以装插件
//转换vue中的jsx代码
cnpm i babel-preset-env@1.6.1 babel-plugin-transform-vue-jsx@3.5.0  -D
cnpm i babel-helper-vue-jsx-merge-props@^2.0.0 babel-plugin-syntax-jsx@^6.8.0 -D
